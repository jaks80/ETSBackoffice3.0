package com.ets.fe.a_main;

import com.ets.fe.Application;
import com.ets.fe.a_maintask.RemarkTask;
import com.ets.fe.pnr.collection.Remarks;
import com.ets.fe.pnr.model.Pnr;
import com.ets.fe.pnr.model.Remark;
import com.ets.fe.util.DateUtil;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;

/**
 *
 * @author Yusuf
 */
public class RemarkComponent extends javax.swing.JPanel implements PropertyChangeListener {

    private Pnr pnr;
    private List<Remark> remarkslist;
    private RemarkTask task;

    public RemarkComponent() {
        initComponents();
    }

    public void setPnr(Pnr pnr){
     this.pnr = pnr;
    }
    
    public void load() {
        task = new RemarkTask(null, pnr.getId(), busyLabel);
        task.addPropertyChangeListener(this);
        task.execute();
    }
    
    private void populateRemark() {       
        txtTextField.setText("");
        txtRemark.setText("");
        SimpleAttributeSet BLUE = new SimpleAttributeSet();
        SimpleAttributeSet BLACK = new SimpleAttributeSet();
        StyleConstants.setForeground(BLUE, Color.BLUE);
        StyleConstants.setForeground(BLACK, Color.BLACK);

        Document rmkDoc = txtRemark.getDocument();

        for (int i = remarkslist.size() - 1; i >= 0; i--) {
            Remark prmk = remarkslist.get(i);
            try {
                if (prmk.getCreatedBy() == null) {
                    rmkDoc.insertString(rmkDoc.getLength(), "" + "" + "" + "", BLUE);
                } else {
                    rmkDoc.insertString(rmkDoc.getLength(), prmk.getDateTime() + " : " + prmk.getCreatedByName() + " : ", BLUE);
                }
                rmkDoc.insertString(rmkDoc.getLength(), prmk.getText() + '\n', BLACK);
            } catch (BadLocationException e) {
                System.out.println("Exception in pnr remark: " + e);
            }
        }
    }

    private void saveRemrak() {
        Remark remark = new Remark();
        Timestamp currentTime = DateUtil.getCurrentTimeStamp();
        String text = txtTextField.getText();
        if (text != null && !text.isEmpty()) {
            remark.setText(text);
            remark.setDateTime(currentTime);
            remark.setCreatedBy(Application.getLoggedOnUser());
            remark.setPnr(this.pnr);

            Remarks remarks = new Remarks();
            remarks.getList().add(remark);
            task = new RemarkTask(remarks, null, busyLabel);
            task.addPropertyChangeListener(this);
            task.execute();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        txtRemark = new javax.swing.JTextArea();
        txtTextField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        busyLabel = new org.jdesktop.swingx.JXBusyLabel();

        txtRemark.setColumns(20);
        txtRemark.setRows(5);
        jScrollPane3.setViewportView(txtRemark);

        txtTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtTextFieldKeyPressed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("Remark");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setText("Insert Message");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(busyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtTextField)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 532, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(busyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTextFieldKeyPressed

        int key = evt.getKeyCode();
        if (key == KeyEvent.VK_ENTER) {
            saveRemrak();
        }
    }//GEN-LAST:event_txtTextFieldKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXBusyLabel busyLabel;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea txtRemark;
    private javax.swing.JTextField txtTextField;
    // End of variables declaration//GEN-END:variables

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if ("progress".equals(evt.getPropertyName())) {
            int progress = (Integer) evt.getNewValue();
            if (progress == 100) {
                try {
                    Remarks remarks = task.get();    
                    remarkslist = new ArrayList<>();
                    remarkslist = remarks.getList();
                    populateRemark();                    
                } catch (InterruptedException | ExecutionException ex) {
                    Logger.getLogger(RemarkComponent.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }
}
